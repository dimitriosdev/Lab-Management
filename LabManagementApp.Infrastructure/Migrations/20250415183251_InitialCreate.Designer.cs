// <auto-generated />
using System;
using LabManagementApp.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabManagementApp.Infrastructure.Migrations
{
    [DbContext(typeof(LabManagementDbContext))]
    [Migration("20250415183251_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.Probe", b =>
                {
                    b.Property<Guid>("ProbeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "probeID");

                    b.Property<string>("DesignVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "designVersion");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "manufacturingDate");

                    b.Property<string>("ManufacturingTechnician")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "manufacturingTechnician");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<string>("ProbeModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "probeModel");

                    b.Property<string>("ProbeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "probeType");

                    b.HasKey("ProbeID");

                    b.ToTable("Probes");

                    b.HasData(
                        new
                        {
                            ProbeID = new Guid("11111111-1111-1111-1111-111111111111"),
                            DesignVersion = "V1.0",
                            ManufacturingDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingTechnician = "John Doe",
                            Notes = "Initial batch",
                            ProbeModel = "Probe Model A",
                            ProbeType = "High-Resolution Liquid Probe"
                        },
                        new
                        {
                            ProbeID = new Guid("22222222-2222-2222-2222-222222222222"),
                            DesignVersion = "V2.1",
                            ManufacturingDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingTechnician = "Jane Smith",
                            Notes = "Updated design",
                            ProbeModel = "Probe Model B",
                            ProbeType = "Solid-State MAS Probe"
                        },
                        new
                        {
                            ProbeID = new Guid("33333333-3333-3333-3333-333333333333"),
                            DesignVersion = "V1.1",
                            ManufacturingDate = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingTechnician = "Alice Brown",
                            Notes = "Minor updates",
                            ProbeModel = "Probe Model C",
                            ProbeType = "High-Resolution Liquid Probe"
                        });
                });

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.TestSession", b =>
                {
                    b.Property<Guid>("TestSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "testSessionID");

                    b.Property<string>("InstrumentUsed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "instrumentUsed");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<int>("PassFailStatus")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "passFailStatus");

                    b.Property<Guid>("ProbeID")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "probeID");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "softwareVersion");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "testDate");

                    b.Property<int>("TestType")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "testType");

                    b.Property<string>("Tester")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tester");

                    b.HasKey("TestSessionID");

                    b.HasIndex("ProbeID");

                    b.ToTable("TestSessions");

                    b.HasAnnotation("Relational:JsonPropertyName", "testSessions");

                    b.HasData(
                        new
                        {
                            TestSessionID = new Guid("33333333-3333-3333-3333-333333333333"),
                            InstrumentUsed = "Network Analyzer Model X",
                            Notes = "All parameters within range",
                            PassFailStatus = 0,
                            ProbeID = new Guid("11111111-1111-1111-1111-111111111111"),
                            SoftwareVersion = "1.2.3",
                            TestDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 0,
                            Tester = "Alice Brown"
                        },
                        new
                        {
                            TestSessionID = new Guid("44444444-4444-4444-4444-444444444444"),
                            InstrumentUsed = "Spectrometer Model Y",
                            Notes = "Some parameters out of range",
                            PassFailStatus = 1,
                            ProbeID = new Guid("22222222-2222-2222-2222-222222222222"),
                            SoftwareVersion = "2.0.0",
                            TestDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 1,
                            Tester = "Bob White"
                        },
                        new
                        {
                            TestSessionID = new Guid("55555555-5555-5555-5555-555555555555"),
                            InstrumentUsed = "Network Analyzer Model X",
                            Notes = "Calibration not applicable for this probe type",
                            PassFailStatus = 2,
                            ProbeID = new Guid("11111111-1111-1111-1111-111111111111"),
                            SoftwareVersion = "1.2.3",
                            TestDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 2,
                            Tester = "Charlie Green"
                        },
                        new
                        {
                            TestSessionID = new Guid("66666666-6666-6666-6666-666666666666"),
                            InstrumentUsed = "Spectrometer Model Y",
                            Notes = "Homogeneity test passed",
                            PassFailStatus = 0,
                            ProbeID = new Guid("22222222-2222-2222-2222-222222222222"),
                            SoftwareVersion = "2.1.0",
                            TestDate = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 3,
                            Tester = "Diana Black"
                        },
                        new
                        {
                            TestSessionID = new Guid("77777777-7777-7777-7777-777777777777"),
                            InstrumentUsed = "Network Analyzer Model Z",
                            Notes = "New test session added",
                            PassFailStatus = 0,
                            ProbeID = new Guid("11111111-1111-1111-1111-111111111111"),
                            SoftwareVersion = "3.0.0",
                            TestDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 0,
                            Tester = "Eve White"
                        });
                });

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.TestSession", b =>
                {
                    b.HasOne("LabManagementApp.Infrastructure.Models.Probe", "Probe")
                        .WithMany("TestSessions")
                        .HasForeignKey("ProbeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Probe");
                });

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.Probe", b =>
                {
                    b.Navigation("TestSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
