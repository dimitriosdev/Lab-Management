// <auto-generated />
using System;
using LabManagementApp.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabManagementApp.Infrastructure.Migrations
{
    [DbContext(typeof(LabManagementDbContext))]
    [Migration("20250415134421_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.Probe", b =>
                {
                    b.Property<Guid>("ProbeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DesignVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturingTechnician")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProbeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProbeID");

                    b.ToTable("Probes");

                    b.HasData(
                        new
                        {
                            ProbeID = new Guid("11111111-1111-1111-1111-111111111111"),
                            DesignVersion = "V1.0",
                            ManufacturingDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingTechnician = "John Doe",
                            Notes = "Initial batch",
                            ProbeType = "High-Resolution Liquid Probe"
                        },
                        new
                        {
                            ProbeID = new Guid("22222222-2222-2222-2222-222222222222"),
                            DesignVersion = "V2.1",
                            ManufacturingDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingTechnician = "Jane Smith",
                            Notes = "Updated design",
                            ProbeType = "Solid-State MAS Probe"
                        });
                });

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.TestSession", b =>
                {
                    b.Property<Guid>("TestSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("InstrumentUsed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassFailStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProbeID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tester")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TestSessionID");

                    b.HasIndex("ProbeID");

                    b.ToTable("TestSessions");

                    b.HasData(
                        new
                        {
                            TestSessionID = new Guid("33333333-3333-3333-3333-333333333333"),
                            InstrumentUsed = "Network Analyzer Model X",
                            Notes = "All parameters within range",
                            PassFailStatus = "Pass",
                            ProbeID = new Guid("11111111-1111-1111-1111-111111111111"),
                            SoftwareVersion = "1.2.3",
                            TestDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = "Tuning and Matching",
                            Tester = "Alice Brown"
                        });
                });

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.TestSession", b =>
                {
                    b.HasOne("LabManagementApp.Infrastructure.Models.Probe", "Probe")
                        .WithMany("TestSessions")
                        .HasForeignKey("ProbeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Probe");
                });

            modelBuilder.Entity("LabManagementApp.Infrastructure.Models.Probe", b =>
                {
                    b.Navigation("TestSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
